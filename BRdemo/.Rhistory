"grid",
"table1",
"code")
install.packages("coda")
pacman::p_load("statmod",
"mvtnorm",
"Matrix",
"splines",
"xtable",
"IRdisplay",
"repr",
"plotly",
"extrafont",
"ggplot2",
"gridExtra",
"grid",
"table1",
"coda")
trace.plot(MCMC.res)
pacman::p_load("statmod",
"mvtnorm",
"Matrix",
"splines",
"xtable",
"IRdisplay",
"repr",
"plotly",
"extrafont",
"ggplot2",
"gridExtra",
"grid",
"table1",
"coda",
"rstan")
trace.plot(MCMC.res)
traceplot(MCMC.res, main = "Trace Plot for MCMC Samples")
traceplot(MCMC.res)
traceplot(MCMC.res$Beta)
traceplot(MCMC.res)
traceplot(MCMC.res$Misclassified)
traceplot(MCMC.res$Gamma)
str(MCMC.res)
traceplot(beta1_samples, main = "Trace Plot for Beta Parameter 1")
load("C:/Users/Partha/Box/RENEW - SOAR/Aim 1 + Aim 2/Partha-Analyses/BioRealm/BRdemo/Mixed.SVM-main/reports/demo-results1.RData")
load("C:/Users/Partha/Box/RENEW - SOAR/Aim 1 + Aim 2/Partha-Analyses/BioRealm/BRdemo/Mixed.SVM-main/reports/demo-results1.RData")
load("C:/Users/Partha/Box/RENEW - SOAR/Aim 1 + Aim 2/Partha-Analyses/BioRealm/BRdemo/Mixed.SVM-main/reports/demo-results1.RData")
load("C:/Users/Partha/Box/RENEW - SOAR/Aim 1 + Aim 2/Partha-Analyses/BioRealm/BRdemo/Mixed.SVM-main/reports/demo-results1.RData")
str(MCMC.res$Beta)
# Loop through each column in the Beta matrix to create trace plots
for (i in 1:ncol(MCMC.res$Beta)) {
# Extract the i-th parameter as an mcmc object
beta_samples <- mcmc(MCMC.res$Beta[, i])
# Generate the trace plot for the i-th parameter
traceplot(beta_samples, main = paste("Trace Plot for Beta Parameter", i))
}
getwd()
load("Mixed.SVM-main/data/processed/example.RData")
head(drinks)
pacman::p_load("statmod",
"mvtnorm",
"Matrix",
"splines",
"xtable",
"IRdisplay",
"repr",
"plotly",
"extrafont",
"ggplot2",
"gridExtra",
"grid",
"table1",
"coda",
"rstan")
set.seed(2) #sets a seed for random number generators used by the algorithm
source("Mixed.SVM-main/src/R/mixed-svm.R")
# source('src/R/mixed-svm.R')
burn.in <- 50000
Y <- as.vector(drinks$HD) # outcome
X <- as.matrix(drinks[,c("male","age","NICUSEDAY","THCUSEDAY","OTHERDRUGUSE")]) # covariates
T <- as.vector(drinks$Day) # times
U <- as.vector(drinks$ursi) # individual id
Tmax <- 720
knot.seq <- c(0.5)
# Iter <- 100000
Iter <- 100
burn.in <- 50000
# Runs the algorithm
# Remove # to run
MCMC.res <- Mixed.SVM(Y, X, T, U, Tmax, knot.seq, Iter)
# Saves the results
# Remove # to run
save(MCMC.res,file='Mixed.SVM-main/reports/demo-results1.RData')
# Here we pull up previously saved results
load(file='Mixed.SVM-main/reports/demo-results1.RData')
str(MCMC.res$Beta)
# Loop through each column in the Beta matrix to create trace plots
for (i in 1:ncol(MCMC.res$Beta)) {
# Extract the i-th parameter as an mcmc object
beta_samples <- mcmc(MCMC.res$Beta[, i])
# Generate the trace plot for the i-th parameter
traceplot(beta_samples, main = paste("Trace Plot for Beta Parameter", i))
}
getwd()
rm(list=ls()) # cleans memory
load("Mixed.SVM-main/data/processed/example.RData")
head(drinks)
if (!require("pacman"))
install.packages("pacman")
pacman::p_load("statmod",
"mvtnorm",
"Matrix",
"splines",
"xtable",
"IRdisplay",
"repr",
"plotly",
"extrafont",
"ggplot2",
"gridExtra",
"grid",
"table1",
"coda",
"rstan")
# set up for plotting figures
options(bitmapType="cairo") #linux
#options(bitmapType="quartz") # mac
set.seed(2) #sets a seed for random number generators used by the algorithm
source("Mixed.SVM-main/src/R/mixed-svm.R")
# source('src/R/mixed-svm.R')
Y <- as.vector(drinks$HD) # outcome
X <- as.matrix(drinks[,c("male","age","NICUSEDAY","THCUSEDAY","OTHERDRUGUSE")]) # covariates
T <- as.vector(drinks$Day) # times
U <- as.vector(drinks$ursi) # individual id
Tmax <- 720
knot.seq <- c(0.5)
# Iter <- 100000
Iter <- 100
burn.in <- 50000
# Runs the algorithm
# Remove # to run
MCMC.res <- Mixed.SVM(Y, X, T, U, Tmax, knot.seq, Iter)
# Saves the results
# Remove # to run
save(MCMC.res,file='Mixed.SVM-main/reports/demo-results1.RData')
# Here we pull up previously saved results
load(file='Mixed.SVM-main/reports/demo-results1.RData')
str(MCMC.res$Beta)
# Loop through each column in the Beta matrix to create trace plots
for (i in 1:ncol(MCMC.res$Beta)) {
# Extract the i-th parameter as an mcmc object
beta_samples <- mcmc(MCMC.res$Beta[, i])
# Generate the trace plot for the i-th parameter
traceplot(beta_samples, main = paste("Trace Plot for Beta Parameter", i))
}
traceplot(MCMC.res$Beta[, i])
traceplot(MCMC.res)
library(coda)
traceplot(MCMC.res)
# Loop through each column in the Beta matrix to create trace plots
for (i in 1:ncol(MCMC.res$Beta)) {
beta_samples <- mcmc(MCMC.res$Beta[, i])
plot(beta_samples, main = paste("Trace Plot for Beta Parameter", i))
}
# Reload the coda package to ensure the traceplot function is available
if (!require(coda)) install.packages("coda")
library(coda)
# Loop through each column in the Beta matrix to create trace plots
for (i in 1:ncol(MCMC.res$Beta)) {
# Extract the i-th parameter as an mcmc object
beta_samples <- mcmc(MCMC.res$Beta[, i])
# Generate the trace plot for the i-th parameter
traceplot(beta_samples, main = paste("Trace Plot for Beta Parameter", i))
}
# Loop through each column in the Beta matrix to create trace plots
for (i in 1:ncol(MCMC.res$Beta)) {
beta_samples <- mcmc(MCMC.res$Beta[, i])
plot(beta_samples, main = paste("Trace Plot for Beta Parameter", i))
}
library("bayesplot")
install.packages("bayesplot")
install.packages("rstanarm")
if (!require("pacman"))
install.packages("pacman")
pacman::p_load("statmod",
"mvtnorm",
"Matrix",
"splines",
"xtable",
"IRdisplay",
"repr",
"plotly",
"extrafont",
"ggplot2",
"gridExtra",
"grid",
"table1",
"coda",
"rstanarm",
"bayesplot")
# library("bayesplot")
# library("ggplot2")
# library("rstanarm")
mcmc_trace(MCMC.res)
# library("bayesplot")
# library("ggplot2")
# library("rstanarm")
mcmc_trace(MCMC.res$Beta)
# library("bayesplot")
# library("ggplot2")
# library("rstanarm")
dim(MCMC.res)
# mcmc_trace(MCMC.res$Beta)
# library("bayesplot")
# library("ggplot2")
# library("rstanarm")
dim(MCMC.res$Beta)
# mcmc_trace(MCMC.res$Beta)
# library("bayesplot")
# library("ggplot2")
# library("rstanarm")
dim(MCMC.res$Beta)
dimnames(MCMC.res$Beta)
# mcmc_trace(MCMC.res$Beta)
# library("bayesplot")
# library("ggplot2")
# library("rstanarm")
# dim(MCMC.res$Beta)
dimnames(MCMC.res$Beta)
# mcmc_trace(MCMC.res$Beta)
# library("bayesplot")
# library("ggplot2")
# library("rstanarm")
dim(MCMC.res$Beta)
dimnames(MCMC.res$Beta)
mcmc_trace(MCMC.res$Beta)
View(MCMC.res)
View(MCMC.res)
View(X)
# library("bayesplot")
# library("ggplot2")
# library("rstanarm")
dim(MCMC.res$Beta)
MCMC.res$Beta
# mcmc_trace(MCMC.res$Beta)
# library("bayesplot")
# library("ggplot2")
# library("rstanarm")
dim(MCMC.res$Beta)
# MCMC.res$Beta
mcmc_trace(MCMC.res$Beta[,1])
# library("bayesplot")
# library("ggplot2")
# library("rstanarm")
dim(MCMC.res$Beta)
MCMC.res$Beta
mcmc_trace(MCMC.res$Beta[,1])
# library("bayesplot")
# library("ggplot2")
# library("rstanarm")
dim(MCMC.res$Beta)
# MCMC.res$Beta
# Convert MCMC.res$Beta to an mcmc object
beta_mcmc <- mcmc(MCMC.res$Beta)
# mcmc_trace(MCMC.res$Beta[,1])
# library("bayesplot")
# library("ggplot2")
# library("rstanarm")
dim(MCMC.res$Beta)
# MCMC.res$Beta
# Convert MCMC.res$Beta to an mcmc object
beta_mcmc <- mcmc(MCMC.res$Beta)
# mcmc_trace(MCMC.res$Beta[,1])
# Plot the trace plot
mcmc_trace(beta_mcmc)
# library("bayesplot")
# library("ggplot2")
# library("rstanarm")
dim(MCMC.res$Beta)
# MCMC.res$Beta
# mcmc_trace(MCMC.res$Beta[,1])
# Select columns explicitly by converting to a data frame
# For example, we take the first 5 columns for trace plotting
beta_mcmc_df <- as.data.frame(MCMC.res$Beta[, 1:5])
# Rename columns temporarily
colnames(beta_mcmc_df) <- paste0("Beta_", 1:5)
# Plot the trace for these columns
mcmc_trace(as.mcmc(beta_mcmc_df))
# Loop through each column in the Beta matrix to create trace plots
for (i in 1:ncol(MCMC.res$Beta)) {
beta_samples <- mcmc(MCMC.res$Beta[, i])
plot(beta_samples)
}
# Loop through each column in the Beta matrix to create trace plots
for (i in 1:ncol(MCMC.res$Beta)) {
beta_samples <- mcmc(MCMC.res$Beta[, i])
mcmc_trace(beta_samples)
}
# Loop through each column in the Beta matrix to create trace plots
for (i in 1:ncol(MCMC.res$Beta)) {
beta_samples <- mcmc(MCMC.res$Beta[, i])
plot(beta_samples, main = paste("Trace Plot for Beta Parameter", i))
}
# library("bayesplot")
# library("ggplot2")
# library("rstanarm")
dimnames(MCMC.res$Beta)
# MCMC.res$Beta
# mcmc_trace(MCMC.res$Beta[,1])
#
# # Select columns explicitly by converting to a data frame
# # For example, we take the first 5 columns for trace plotting
# beta_mcmc_df <- as.data.frame(MCMC.res$Beta[, 1:5])
#
# # Rename columns temporarily
# colnames(beta_mcmc_df) <- paste0("Beta_", 1:5)
#
# # Plot the trace for these columns
# mcmc_trace(as.mcmc(beta_mcmc_df))
# library("bayesplot")
# library("ggplot2")
# library("rstanarm")
dimnames(MCMC.res)
# MCMC.res$Beta
# mcmc_trace(MCMC.res$Beta[,1])
#
# # Select columns explicitly by converting to a data frame
# # For example, we take the first 5 columns for trace plotting
# beta_mcmc_df <- as.data.frame(MCMC.res$Beta[, 1:5])
#
# # Rename columns temporarily
# colnames(beta_mcmc_df) <- paste0("Beta_", 1:5)
#
# # Plot the trace for these columns
# mcmc_trace(as.mcmc(beta_mcmc_df))
# library("bayesplot")
# library("ggplot2")
# library("rstanarm")
dimnames(MCMC.res$Gamma)
# MCMC.res$Beta
# mcmc_trace(MCMC.res$Beta[,1])
#
# # Select columns explicitly by converting to a data frame
# # For example, we take the first 5 columns for trace plotting
# beta_mcmc_df <- as.data.frame(MCMC.res$Beta[, 1:5])
#
# # Rename columns temporarily
# colnames(beta_mcmc_df) <- paste0("Beta_", 1:5)
#
# # Plot the trace for these columns
# mcmc_trace(as.mcmc(beta_mcmc_df))
# library("bayesplot")
# library("ggplot2")
# library("rstanarm")
dimnames(MCMC.res$)
# library("bayesplot")
# library("ggplot2")
# library("rstanarm")
dimnames(MCMC.res$Beta)
# MCMC.res$Beta
# mcmc_trace(MCMC.res$Beta[,1])
#
# # Select columns explicitly by converting to a data frame
# # For example, we take the first 5 columns for trace plotting
# beta_mcmc_df <- as.data.frame(MCMC.res$Beta[, 1:5])
#
# # Rename columns temporarily
# colnames(beta_mcmc_df) <- paste0("Beta_", 1:5)
#
# # Plot the trace for these columns
# mcmc_trace(as.mcmc(beta_mcmc_df))
colnames(MCMC.res$Beta) <- c("beta_age", "beta_nicuseday", "beta_3", "beta_4", "beta_5")
mcmc_trace(as.array(MCMC.res$Beta))
Y <- as.vector(drinks$HD) # outcome
X <- as.matrix(drinks[,c("male","age","NICUSEDAY","THCUSEDAY","OTHERDRUGUSE")]) # covariates
T <- as.vector(drinks$Day) # times
U <- as.vector(drinks$ursi) # individual id
Tmax <- 720
knot.seq <- c(0.5)
# Iter <- 100000
Iter <- 10000
burn.in <- 50000
# Runs the algorithm
# Remove # to run
MCMC.res <- Mixed.SVM(Y, X, T, U, Tmax, knot.seq, Iter)
# Saves the results
# Remove # to run
save(MCMC.res,file='Mixed.SVM-main/reports/demo-results10k.RData')
# Here we pull up previously saved results
load(file='Mixed.SVM-main/reports/demo-results10k.RData')
str(MCMC.res$Beta)
# library("bayesplot")
# library("ggplot2")
# library("rstanarm")
dimnames(MCMC.res$Beta)
# MCMC.res$Beta
# mcmc_trace(MCMC.res$Beta[,1])
#
# # Select columns explicitly by converting to a data frame
# # For example, we take the first 5 columns for trace plotting
# beta_mcmc_df <- as.data.frame(MCMC.res$Beta[, 1:5])
#
# # Rename columns temporarily
# colnames(beta_mcmc_df) <- paste0("Beta_", 1:5)
#
# # Plot the trace for these columns
# mcmc_trace(as.mcmc(beta_mcmc_df))
colnames(MCMC.res$Beta) <- c("beta_age", "beta_nicuseday", "beta_3", "beta_4", "beta_5")
mcmc_trace(as.array(MCMC.res$Beta))
dimnames(MCMC.res$Beta)
# Understanding Dimensions and other parameters of the output
dim(MCMC.res$Beta)
dimnames(MCMC.res$Beta)
mcmc_trace(MCMC.res$Beta)
# colnames(MCMC.res$Beta) <- c("beta_age", "beta_nicuseday", "beta_3", "beta_4", "beta_5")
# mcmc_trace(as.array(MCMC.res$Beta))
# Runs the algorithm
# Remove # to run
# MCMC.res <- Mixed.SVM(Y, X, T, U, Tmax, knot.seq, Iter)
# Saves the results
# Remove # to run
# save(MCMC.res,file='Mixed.SVM-main/reports/demo-results10k.RData')
# Here we pull up previously saved results
load(file='Mixed.SVM-main/reports/demo-results10k.RData')
# Understanding Dimensions and other parameters of the output
str(MCMC.res$Beta)
dim(MCMC.res$Beta)
dimnames(MCMC.res$Beta)
# Trace plots
mcmc_trace(MCMC.res$Beta)
# Understanding Dimensions and other parameters of the output
str(MCMC.res$Beta)
dim(MCMC.res$Beta)
dimnames(MCMC.res$Beta)
# Trace plots
# mcmc_trace(MCMC.res$Beta) --> Error in `parameter_names()`
colnames(MCMC.res$Beta) <- c("beta_male","beta_age","beta_NICUSEDAY","beta_THCUSEDAY","beta_OTHERDRUGUSE")
mcmc_trace(as.array(MCMC.res$Beta))
# Runs the algorithm
# Remove # to run
MCMC.res <- Mixed.SVM(Y, X, T, U, Tmax, knot.seq, Iter)
Y <- as.vector(drinks$HD) # outcome
X <- as.matrix(drinks[,c("male","age","NICUSEDAY","THCUSEDAY","OTHERDRUGUSE")]) # covariates
T <- as.vector(drinks$Day) # times
U <- as.vector(drinks$ursi) # individual id
Tmax <- 720
knot.seq <- c(0.5)
# Iter <- 100000
Iter <- 1000
burn.in <- 50000
# Runs the algorithm
# Remove # to run
MCMC.res <- Mixed.SVM(Y, X, T, U, Tmax, knot.seq, Iter)
# Saves the results
# Remove # to run
save(MCMC.res,file='Mixed.SVM-main/reports/demo-results1k.RData')
# Here we pull up previously saved results
load(file='Mixed.SVM-main/reports/demo-results1k.RData')
# Loading the results
load(file='Mixed.SVM-main/reports/demo-results100.RData')
# Understanding Dimensions and other parameters of the output
str(MCMC.res$Beta)
dim(MCMC.res$Beta)
dimnames(MCMC.res$Beta)
# Trace plots
# mcmc_trace(MCMC.res$Beta) --> Error in `parameter_names()`
colnames(MCMC.res$Beta) <- c("beta_male","beta_age","beta_NICUSEDAY","beta_THCUSEDAY","beta_OTHERDRUGUSE")
mcmc_trace(as.array(MCMC.res$Beta))
# Loading the results
load(file='Mixed.SVM-main/reports/demo-results1k.RData')
# Understanding Dimensions and other parameters of the output
str(MCMC.res$Beta)
dim(MCMC.res$Beta)
dimnames(MCMC.res$Beta)
# Trace plots
# mcmc_trace(MCMC.res$Beta) --> Error in `parameter_names()`
# Adding column names to the "Beta" matrix to avoid the above error
colnames(MCMC.res$Beta) <- c("beta_male","beta_age","beta_NICUSEDAY","beta_THCUSEDAY","beta_OTHERDRUGUSE")
mcmc_trace(as.array(MCMC.res$Beta))
# Loading the results
load(file='Mixed.SVM-main/reports/demo-results1k.RData')
# Understanding Dimensions and other parameters of the output
str(MCMC.res$Beta)
dim(MCMC.res$Beta)
dimnames(MCMC.res$Beta)
# Trace plots
# mcmc_trace(MCMC.res$Beta) --> Error in `parameter_names()`
# Adding column names to the "Beta" matrix to avoid the above error
colnames(MCMC.res$Beta) <- c("beta_male","beta_age","beta_NICUSEDAY","beta_THCUSEDAY","beta_OTHERDRUGUSE")
mcmc_trace(as.array(MCMC.res$Beta))
# Loading the results
load(file='Mixed.SVM-main/reports/demo-results1k.RData')
# Understanding Dimensions and other parameters of the output
str(MCMC.res$Beta)
dim(MCMC.res$Beta)
dimnames(MCMC.res$Beta)
# Trace plots
# mcmc_trace(MCMC.res$Beta) --> Error in `parameter_names()`
# Adding column names to the "Beta" matrix to avoid the above error
colnames(MCMC.res$Beta) <- c("beta_male","beta_age","beta_NICUSEDAY","beta_THCUSEDAY","beta_OTHERDRUGUSE")
mcmc_trace(as.array(MCMC.res$Beta))
# Loading the results
load(file='Mixed.SVM-main/reports/demo-results10k.RData')
# Understanding Dimensions and other parameters of the output
str(MCMC.res$Beta)
dim(MCMC.res$Beta)
dimnames(MCMC.res$Beta)
# Trace plots
# mcmc_trace(MCMC.res$Beta) --> Error in `parameter_names()`
# Adding column names to the "Beta" matrix to avoid the above error
colnames(MCMC.res$Beta) <- c("beta_male","beta_age","beta_NICUSEDAY","beta_THCUSEDAY","beta_OTHERDRUGUSE")
mcmc_trace(as.array(MCMC.res$Beta))
git publish
